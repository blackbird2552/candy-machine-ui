{"ast":null,"code":"var _jsxFileName = \"/home/blackbird/projects/candy-machine-ui/src/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { PublicKey } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, getCandyMachineState, mintOneToken } from './candy-machine';\nimport { toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n_c = ConnectButton;\nconst MintContainer = styled.div``; // add your owns styles here\n\n_c2 = MintContainer;\n\nconst Home = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state2, _candyMachine$state2$;\n\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState();\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: '',\n    severity: undefined\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [itemsRemaining, setItemsRemaining] = useState();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState();\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state$goLiveDat, _cndy$state$endSettin, _cndy$state$endSettin2;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, props.connection);\n        let active = (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$goLiveDat = cndy.state.goLiveDate) === null || _cndy$state$goLiveDat === void 0 ? void 0 : _cndy$state$goLiveDat.toNumber()) < new Date().getTime() / 1000;\n        let presale = false; // whitelist mint?\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (cndy.state.whitelistMintSettings.presale && (!cndy.state.goLiveDate || cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)) {\n            presale = true;\n          } // is there a discount?\n\n\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined); // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          } // retrieves the whitelist token\n\n\n          const mint = new anchor.web3.PublicKey(cndy.state.whitelistMintSettings.mint);\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(token);\n            let valid = parseInt(balance.value.amount) > 0; // only whitelist the user if the balance > 0\n\n            setIsWhitelistUser(valid);\n            active = presale && valid || active;\n          } catch (e) {\n            setIsWhitelistUser(false); // no whitelist user, no mint\n\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        } // datetime to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin = cndy.state.endSettings) !== null && _cndy$state$endSettin !== void 0 && _cndy$state$endSettin.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n\n          if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n            active = false;\n          }\n        } // amount to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin2 = cndy.state.endSettings) !== null && _cndy$state$endSettin2 !== void 0 && _cndy$state$endSettin2.endSettingType.amount) {\n          let limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive(cndy.state.isActive = active);\n        setIsPresale(cndy.state.isPresale = presale);\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log('There was a problem fetching Candy Machine state');\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async function () {\n    let beforeTransactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let afterTransactions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    try {\n      var _document$getElementB;\n\n      setIsUserMinting(true);\n      (_document$getElementB = document.getElementById('#identity')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n\n      if (wallet.connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && wallet.publicKey) {\n        let mintOne = await mintOneToken(candyMachine, wallet.publicKey, beforeTransactions, afterTransactions);\n        const mintTxId = mintOne[0];\n        let status = {\n          err: true\n        };\n\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, true);\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining - 1;\n          setItemsRemaining(remaining);\n          setIsActive(candyMachine.state.isActive = remaining > 0);\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success'\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error'\n          });\n        }\n      }\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error'\n      }); // updates the candy machine state to reflect the lastest\n      // information on chain\n\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() <= new Date().getTime() / 1000) {\n      setIsPresale(candyMachine.state.isPresale = false);\n    }\n\n    setIsActive(candyMachine.state.isActive = active);\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      marginTop: 100\n    },\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      style: {\n        position: 'relative'\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          padding: 24,\n          paddingBottom: 10,\n          backgroundColor: '#151A1F',\n          borderRadius: 6\n        },\n        children: [!wallet.connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [candyMachine && /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"center\",\n            wrap: \"nowrap\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 3,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: \"Remaining\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: `${itemsRemaining}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: isWhitelistUser && discountPrice ? 'Discount Price' : 'Price'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: isWhitelistUser && discountPrice ? `◎ ${formatNumber.asNumber(discountPrice)}` : `◎ ${formatNumber.asNumber(candyMachine.state.price)}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 5,\n              children: isActive && endDate && Date.now() < endDate.getTime() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                  date: getCountdownDate(candyMachine),\n                  style: {\n                    justifyContent: 'flex-end'\n                  },\n                  status: \"COMPLETED\",\n                  onComplete: toggleMintButton\n                }, \"endSettings\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  align: \"center\",\n                  display: \"block\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"TO END OF MINT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 358,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                  date: getCountdownDate(candyMachine),\n                  style: {\n                    justifyContent: 'flex-end'\n                  },\n                  status: candyMachine !== null && candyMachine !== void 0 && (_candyMachine$state = candyMachine.state) !== null && _candyMachine$state !== void 0 && _candyMachine$state.isSoldOut || endDate && Date.now() > endDate.getTime() ? 'COMPLETED' : isPresale ? 'PRESALE' : 'LIVE',\n                  onComplete: toggleMintButton\n                }, \"goLive\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 25\n                }, this), isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() > new Date().getTime() / 1000 && /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  align: \"center\",\n                  display: \"block\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"UNTIL PUBLIC MINT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n            children: candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n              wallet: {\n                publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                //@ts-ignore\n                signTransaction: wallet.signTransaction\n              },\n              gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state2 = candyMachine.state) === null || _candyMachine$state2 === void 0 ? void 0 : (_candyMachine$state2$ = _candyMachine$state2.gatekeeper) === null || _candyMachine$state2$ === void 0 ? void 0 : _candyMachine$state2$.gatekeeperNetwork,\n              clusterUrl: rpcUrl,\n              handleTransaction: async transaction => {\n                setIsUserMinting(true);\n                const userMustSign = transaction.signatures.find(sig => sig.publicKey.equals(wallet.publicKey));\n\n                if (userMustSign) {\n                  setAlertState({\n                    open: true,\n                    message: 'Please sign one-time Civic Pass issuance',\n                    severity: 'info'\n                  });\n\n                  try {\n                    transaction = await wallet.signTransaction(transaction);\n                  } catch (e) {\n                    setAlertState({\n                      open: true,\n                      message: 'User cancelled signing',\n                      severity: 'error'\n                    }); // setTimeout(() => window.location.reload(), 2000);\n\n                    setIsUserMinting(false);\n                    throw e;\n                  }\n                } else {\n                  setAlertState({\n                    open: true,\n                    message: 'Refreshing Civic Pass',\n                    severity: 'info'\n                  });\n                }\n\n                try {\n                  await sendTransaction(props.connection, wallet, transaction, [], true, 'confirmed');\n                  setAlertState({\n                    open: true,\n                    message: 'Please sign minting',\n                    severity: 'info'\n                  });\n                } catch (e) {\n                  setAlertState({\n                    open: true,\n                    message: 'Solana dropped the transaction, please try again',\n                    severity: 'warning'\n                  });\n                  console.error(e); // setTimeout(() => window.location.reload(), 2000);\n\n                  setIsUserMinting(false);\n                  throw e;\n                }\n\n                await onMint();\n              },\n              broadcastTransaction: false,\n              options: {\n                autoShowModal: false\n              },\n              children: /*#__PURE__*/_jsxDEV(MintButton, {\n                candyMachine: candyMachine,\n                isMinting: isUserMinting,\n                setIsMinting: val => setIsUserMinting(val),\n                onMint: onMint,\n                isActive: isActive || isPresale && isWhitelistUser,\n                rpcUrl: rpcUrl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n              candyMachine: candyMachine,\n              isMinting: isUserMinting,\n              setIsMinting: val => setIsUserMinting(val),\n              onMint: onMint,\n              isActive: isActive || isPresale && isWhitelistUser,\n              rpcUrl: rpcUrl\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          align: \"center\",\n          display: \"block\",\n          style: {\n            marginTop: 7,\n            color: 'grey'\n          },\n          children: \"Powered by METAPLEX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: 6000,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"b/ju6lN1OqCoGs037cvl3EEFfxw=\", false, function () {\n  return [useWallet];\n});\n\n_c3 = Home;\n\nconst getCountdownDate = candyMachine => {\n  var _candyMachine$state$e;\n\n  if (candyMachine.state.isActive && (_candyMachine$state$e = candyMachine.state.endSettings) !== null && _candyMachine$state$e !== void 0 && _candyMachine$state$e.endSettingType.date) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : candyMachine.state.isPresale ? new anchor.BN(new Date().getTime() / 1000) : undefined);\n};\n\nexport default Home;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"sources":["/home/blackbird/projects/candy-machine-ui/src/Home.tsx"],"names":["useEffect","useMemo","useState","useCallback","anchor","styled","Container","Snackbar","Paper","Alert","Grid","Typography","PublicKey","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","getCandyMachineState","mintOneToken","toDate","formatNumber","getAtaForMint","MintCountdown","MintButton","GatewayProvider","sendTransaction","ConnectButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","candyMachine","setCandyMachine","alertState","setAlertState","open","message","severity","undefined","isActive","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","isPresale","setIsPresale","discountPrice","setDiscountPrice","rpcUrl","rpcHost","wallet","anchorWallet","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","candyMachineId","cndy","connection","active","state","goLiveDate","toNumber","Date","getTime","presale","whitelistMintSettings","isWhitelistOnly","mint","web3","token","balance","getTokenAccountBalance","valid","parseInt","value","amount","e","console","log","endSettings","endSettingType","date","number","limit","Math","min","itemsAvailable","itemsRedeemed","isSoldOut","onMint","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","mintOne","mintTxId","status","err","txTimeout","remaining","error","msg","indexOf","code","window","location","reload","toggleMintButton","now","marginTop","position","padding","paddingBottom","backgroundColor","borderRadius","fontWeight","asNumber","price","getCountdownDate","justifyContent","gatekeeper","gatekeeperNetwork","transaction","userMustSign","signatures","find","sig","equals","autoShowModal","val","color","BN"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState, useCallback } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport styled from 'styled-components';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { PublicKey, Transaction } from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from './candy-machine';\r\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { MintButton } from './MintButton';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\nimport { sendTransaction } from './connection';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(async () => {\r\n    if (!anchorWallet) {\r\n      return;\r\n    }\r\n\r\n    if (props.candyMachineId) {\r\n      try {\r\n        const cndy = await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection,\r\n        );\r\n        let active =\r\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\r\n        let presale = false;\r\n        // whitelist mint?\r\n        if (cndy?.state.whitelistMintSettings) {\r\n          // is it a presale mint?\r\n          if (\r\n            cndy.state.whitelistMintSettings.presale &&\r\n            (!cndy.state.goLiveDate ||\r\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n          ) {\r\n            presale = true;\r\n          }\r\n          // is there a discount?\r\n          if (cndy.state.whitelistMintSettings.discountPrice) {\r\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n          } else {\r\n            setDiscountPrice(undefined);\r\n            // when presale=false and discountPrice=null, mint is restricted\r\n            // to whitelist users only\r\n            if (!cndy.state.whitelistMintSettings.presale) {\r\n              cndy.state.isWhitelistOnly = true;\r\n            }\r\n          }\r\n          // retrieves the whitelist token\r\n          const mint = new anchor.web3.PublicKey(\r\n            cndy.state.whitelistMintSettings.mint,\r\n          );\r\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\r\n\r\n          try {\r\n            const balance = await props.connection.getTokenAccountBalance(\r\n              token,\r\n            );\r\n            let valid = parseInt(balance.value.amount) > 0;\r\n            // only whitelist the user if the balance > 0\r\n            setIsWhitelistUser(valid);\r\n            active = (presale && valid) || active;\r\n          } catch (e) {\r\n            setIsWhitelistUser(false);\r\n            // no whitelist user, no mint\r\n            if (cndy.state.isWhitelistOnly) {\r\n              active = false;\r\n            }\r\n            console.log('There was a problem fetching whitelist token balance');\r\n            console.log(e);\r\n          }\r\n        }\r\n        // datetime to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.date) {\r\n          setEndDate(toDate(cndy.state.endSettings.number));\r\n          if (\r\n            cndy.state.endSettings.number.toNumber() <\r\n            new Date().getTime() / 1000\r\n          ) {\r\n            active = false;\r\n          }\r\n        }\r\n        // amount to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.amount) {\r\n          let limit = Math.min(\r\n            cndy.state.endSettings.number.toNumber(),\r\n            cndy.state.itemsAvailable,\r\n          );\r\n          if (cndy.state.itemsRedeemed < limit) {\r\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n          } else {\r\n            setItemsRemaining(0);\r\n            cndy.state.isSoldOut = true;\r\n          }\r\n        } else {\r\n          setItemsRemaining(cndy.state.itemsRemaining);\r\n        }\r\n\r\n        if (cndy.state.isSoldOut) {\r\n          active = false;\r\n        }\r\n\r\n        setIsActive((cndy.state.isActive = active));\r\n        setIsPresale((cndy.state.isPresale = presale));\r\n        setCandyMachine(cndy);\r\n      } catch (e) {\r\n        console.log('There was a problem fetching Candy Machine state');\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      document.getElementById('#identity')?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        let mintOne = await mintOneToken(\r\n          candyMachine,\r\n          wallet.publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n        );\r\n\r\n        const mintTxId = mintOne[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true,\r\n          );\r\n        }\r\n\r\n        if (status && !status.err) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          let remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Congratulations! Mint succeeded!',\r\n            severity: 'success',\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Mint failed! Please try again!',\r\n            severity: 'error',\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = 'Transaction Timeout! Please try again.';\r\n        } else if (error.message.indexOf('0x137')) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: 'error',\r\n      });\r\n      // updates the candy machine state to reflect the lastest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        <Paper\r\n          style={{\r\n            padding: 24,\r\n            paddingBottom: 10,\r\n            backgroundColor: '#151A1F',\r\n            borderRadius: 6,\r\n          }}\r\n        >\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              {candyMachine && (\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  wrap=\"nowrap\"\r\n                >\r\n                  <Grid item xs={3}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Remaining\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{\r\n                        fontWeight: 'bold',\r\n                      }}\r\n                    >\r\n                      {`${itemsRemaining}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      {isWhitelistUser && discountPrice\r\n                        ? 'Discount Price'\r\n                        : 'Price'}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{ fontWeight: 'bold' }}\r\n                    >\r\n                      {isWhitelistUser && discountPrice\r\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                        : `◎ ${formatNumber.asNumber(\r\n                            candyMachine.state.price,\r\n                          )}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"endSettings\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status=\"COMPLETED\"\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          align=\"center\"\r\n                          display=\"block\"\r\n                          style={{ fontWeight: 'bold' }}\r\n                        >\r\n                          TO END OF MINT\r\n                        </Typography>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"goLive\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status={\r\n                            candyMachine?.state?.isSoldOut ||\r\n                            (endDate && Date.now() > endDate.getTime())\r\n                              ? 'COMPLETED'\r\n                              : isPresale\r\n                              ? 'PRESALE'\r\n                              : 'LIVE'\r\n                          }\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        {isPresale &&\r\n                          candyMachine.state.goLiveDate &&\r\n                          candyMachine.state.goLiveDate.toNumber() >\r\n                            new Date().getTime() / 1000 && (\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: 'bold' }}\r\n                            >\r\n                              UNTIL PUBLIC MINT\r\n                            </Typography>\r\n                          )}\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                wallet.publicKey &&\r\n                wallet.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        wallet.publicKey ||\r\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      //@ts-ignore\r\n                      signTransaction: wallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    handleTransaction={async (transaction: Transaction) => {\r\n                      setIsUserMinting(true);\r\n                      const userMustSign = transaction.signatures.find(sig =>\r\n                        sig.publicKey.equals(wallet.publicKey!),\r\n                      );\r\n                      if (userMustSign) {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Please sign one-time Civic Pass issuance',\r\n                          severity: 'info',\r\n                        });\r\n                        try {\r\n                          transaction = await wallet.signTransaction!(\r\n                            transaction,\r\n                          );\r\n                        } catch (e) {\r\n                          setAlertState({\r\n                            open: true,\r\n                            message: 'User cancelled signing',\r\n                            severity: 'error',\r\n                          });\r\n                          // setTimeout(() => window.location.reload(), 2000);\r\n                          setIsUserMinting(false);\r\n                          throw e;\r\n                        }\r\n                      } else {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Refreshing Civic Pass',\r\n                          severity: 'info',\r\n                        });\r\n                      }\r\n                      try {\r\n                        await sendTransaction(\r\n                          props.connection,\r\n                          wallet,\r\n                          transaction,\r\n                          [],\r\n                          true,\r\n                          'confirmed',\r\n                        );\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Please sign minting',\r\n                          severity: 'info',\r\n                        });\r\n                      } catch (e) {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message:\r\n                            'Solana dropped the transaction, please try again',\r\n                          severity: 'warning',\r\n                        });\r\n                        console.error(e);\r\n                        // setTimeout(() => window.location.reload(), 2000);\r\n                        setIsUserMinting(false);\r\n                        throw e;\r\n                      }\r\n                      await onMint();\r\n                    }}\r\n                    broadcastTransaction={false}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      setIsMinting={val => setIsUserMinting(val)}\r\n                      onMint={onMint}\r\n                      isActive={isActive || (isPresale && isWhitelistUser)}\r\n                      rpcUrl={rpcUrl}\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    setIsMinting={val => setIsUserMinting(val)}\r\n                    onMint={onMint}\r\n                    isActive={isActive || (isPresale && isWhitelistUser)}\r\n                    rpcUrl={rpcUrl}\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n          <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 7, color: 'grey' }}\r\n          >\r\n            Powered by METAPLEX\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount,\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined,\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}