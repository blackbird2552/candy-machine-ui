{"ast":null,"code":"import { Transaction } from '@solana/web3.js';\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\nexport const getErrorForTransaction = async (connection, txid) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n  const errors = [];\n\n  if (tx !== null && tx !== void 0 && tx.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\nexport let SequenceType;\n\n(function (SequenceType) {\n  SequenceType[SequenceType[\"Sequential\"] = 0] = \"Sequential\";\n  SequenceType[SequenceType[\"Parallel\"] = 1] = \"Parallel\";\n  SequenceType[SequenceType[\"StopOnFailure\"] = 2] = \"StopOnFailure\";\n})(SequenceType || (SequenceType = {}));\n\nexport async function sendTransactionsWithManualRetry(connection, wallet, instructions, signers) {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(connection, wallet, instructions[0], filteredSigners[0], 'single');\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const {\n          txs\n        } = await sendTransactions(connection, wallet, instructions, filteredSigners, SequenceType.StopOnFailure, 'single');\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    console.log('Died on ', stopPoint, 'retrying from instruction', instructions[stopPoint], 'instructions length is', instructions.length);\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\nexport const sendTransactions = async function (connection, wallet, instructionSet, signersSet) {\n  let sequenceType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : SequenceType.Parallel;\n  let commitment = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'singleGossip';\n  let successCallback = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : (txid, ind) => {};\n  let failCallback = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : (txid, ind) => false;\n  let block = arguments.length > 8 ? arguments[8] : undefined;\n  let beforeTransactions = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];\n  let afterTransactions = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : [];\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  const unsignedTxns = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners( // fee payed by the wallet owner\n    wallet.publicKey, ...signers.map(s => s.publicKey));\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  unsignedTxns.push(...afterTransactions);\n  const partiallySignedTransactions = unsignedTxns.filter(t => t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)));\n  const fullySignedTransactions = unsignedTxns.filter(t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)));\n  let signedTxns = await wallet.signAllTransactions(partiallySignedTransactions);\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns = [];\n  let breakEarlyObject = {\n    breakEarly: false,\n    i: 0\n  };\n  console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\n\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i]\n    });\n    signedTxnPromise.then(_ref => {\n      let {\n        txid,\n        slot\n      } = _ref;\n      successCallback(txid, i);\n      return {\n        txid,\n        slot\n      };\n    }).catch(reason => {\n      failCallback(signedTxns[i], i);\n\n      if (sequenceType === SequenceType.StopOnFailure) {\n        breakEarlyObject.breakEarly = true;\n        breakEarlyObject.i = i;\n      }\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Caught failure', e);\n\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i); // Return the txn we failed on by index\n\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns)\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return {\n      number: signedTxns.length,\n      txs: result\n    };\n  }\n\n  return {\n    number: signedTxns.length,\n    txs: await Promise.all(pendingTxns)\n  };\n};\nexport const sendTransaction = async function (connection, wallet, instructions, signers) {\n  let awaitConfirmation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  let commitment = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'singleGossip';\n  let includesFeePayer = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  let block = arguments.length > 7 ? arguments[7] : undefined;\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let transaction;\n\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners( // fee payed by the wallet owner\n      wallet.publicKey, ...signers.map(s => s.publicKey));\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment\n  };\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(txid, DEFAULT_TIMEOUT, connection, commitment);\n    if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n    slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\n\n    if (confirmation !== null && confirmation !== void 0 && confirmation.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return {\n    txid,\n    slot\n  };\n};\nexport const sendTransactionWithRetry = async function (connection, wallet, instructions, signers) {\n  let commitment = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'singleGossip';\n  let includesFeePayer = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  let block = arguments.length > 6 ? arguments[6] : undefined;\n  let beforeSend = arguments.length > 7 ? arguments[7] : undefined;\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners( // fee payed by the wallet owner\n    wallet.publicKey, ...signers.map(s => s.publicKey));\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const {\n    txid,\n    slot\n  } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction\n  });\n  return {\n    txid,\n    slot\n  };\n};\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\nconst DEFAULT_TIMEOUT = 15000;\nexport async function sendSignedTransaction(_ref2) {\n  let {\n    signedTransaction,\n    connection,\n    timeout = DEFAULT_TIMEOUT\n  } = _ref2;\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true\n  });\n  console.log('Started awaiting confirmation for', txid);\n  let done = false;\n\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true\n      });\n      await sleep(500);\n    }\n  })();\n\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(txid, timeout, connection, 'recent', true);\n    if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\n  } catch (err) {\n    console.error('Timeout Error caught', err);\n\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n\n    let simulateResult = null;\n\n    try {\n      simulateResult = (await simulateTransaction(connection, signedTransaction, 'single')).value;\n    } catch (e) {}\n\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n\n          if (line.startsWith('Program log: ')) {\n            throw new Error('Transaction failed: ' + line.slice('Program log: '.length));\n          }\n        }\n      }\n\n      throw new Error(JSON.stringify(simulateResult.err));\n    } // throw new Error('Transaction failed');\n\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return {\n    txid,\n    slot\n  };\n}\n\nasync function simulateTransaction(connection, transaction, commitment) {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash( // @ts-ignore\n  connection._disableBlockhashCaching);\n  const signData = transaction.serializeMessage(); // @ts-ignore\n\n  const wireTransaction = transaction._serialize(signData);\n\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config = {\n    encoding: 'base64',\n    commitment\n  };\n  const args = [encodedTransaction, config]; // @ts-ignore\n\n  const res = await connection._rpcRequest('simulateTransaction', args);\n\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(txid, timeout, connection) {\n  let commitment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'recent';\n  let queryStatus = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({\n        timeout: true\n      });\n    }, timeout);\n\n    try {\n      subId = connection.onSignature(txid, (result, context) => {\n        done = true;\n        status = {\n          err: result.err,\n          slot: context.slot,\n          confirmations: 0\n        };\n\n        if (result.err) {\n          console.log('Rejected via websocket', result.err);\n          reject(status);\n        } else {\n          console.log('Resolved via websocket', result);\n          resolve(status);\n        }\n      }, commitment);\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([txid]);\n          status = signatureStatuses && signatureStatuses.value[0];\n\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n\n      await sleep(2000);\n    }\n  }); //@ts-ignore\n\n  if (connection._signatureSubscriptions[subId]) connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\n\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","map":{"version":3,"sources":["/home/blackbird/projects/candy-machine-ui/src/connection.tsx"],"names":["Transaction","WalletNotConnectedError","getErrorForTransaction","connection","txid","confirmTransaction","tx","getParsedConfirmedTransaction","errors","meta","logMessages","forEach","log","regex","m","exec","index","lastIndex","length","push","SequenceType","sendTransactionsWithManualRetry","wallet","instructions","signers","stopPoint","tries","lastInstructionsLength","toRemoveSigners","filter","instr","i","ids","filteredSigners","_","slice","id","sendTransactionWithRetry","txs","sendTransactions","StopOnFailure","concat","map","t","e","console","error","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","beforeTransactions","afterTransactions","publicKey","unsignedTxns","getRecentBlockhash","transaction","instruction","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","signatures","find","sig","equals","fullySignedTransactions","signedTxns","signAllTransactions","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","number","Promise","all","result","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","confirmation","awaitTransactionSignatureConfirmation","DEFAULT_TIMEOUT","Error","err","beforeSend","getUnixTs","Date","getTime","timeout","startTime","done","sleep","simulateResult","simulateTransaction","value","logs","line","startsWith","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","config","encoding","args","res","_rpcRequest","message","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","signatureStatuses","getSignatureStatuses","_signatureSubscriptions","removeSignatureListener","ms"],"mappings":"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","sourcesContent":["import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      'Died on ',\r\n      stopPoint,\r\n      'retrying from instruction',\r\n      instructions[stopPoint],\r\n      'instructions length is',\r\n      instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = 'singleGossip',\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\r\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n    partiallySignedTransactions,\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  let breakEarlyObject = { breakEarly: false, i: 0 };\r\n  console.log(\r\n    'Signed txns length',\r\n    signedTxns.length,\r\n    'vs handed in length',\r\n    instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    signedTxnPromise\r\n      .then(({ txid, slot }) => {\r\n        successCallback(txid, i);\r\n        return { txid, slot };\r\n      })\r\n      .catch(reason => {\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          breakEarlyObject.breakEarly = true;\r\n          breakEarlyObject.i = i;\r\n        }\r\n      });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise;\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log('Caught failure', e);\r\n        if (breakEarlyObject.breakEarly) {\r\n          console.log('Died on ', breakEarlyObject.i);\r\n          // Return the txn we failed on by index\r\n          return {\r\n            number: breakEarlyObject.i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[] | Transaction,\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (instructions instanceof Transaction) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n\r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 15000;\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      'recent',\r\n      true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log('Rejected via websocket', result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log('Resolved via websocket', result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}